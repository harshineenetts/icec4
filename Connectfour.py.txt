def create_board(rows, cols):
    return [[' ' for _ in range(cols)] for _ in range(rows)]

def print_board(board):
    for row in board:
        print('|'.join(row))
        print('-' * (len(row) * 2 - 1))

def drop_token(board, col, player):
    for row in range(len(board) - 1, -1, -1):
        if board[row][col] == ' ':
            board[row][col] = player
            return True
    return False

def check_win(board, player):
    rows = len(board)
    cols = len(board[0])

    for row in range(rows):
        for col in range(cols - 3):
            if all(board[row][col + i] == player for i in range(4)):
                return True

    for row in range(rows - 3):
        for col in range(cols):
            if all(board[row + i][col] == player for i in range(4)):
                return True

    for row in range(rows - 3):
        for col in range(cols - 3):
            if all(board[row + i][col + i] == player for i in range(4)):
                return True

            if all(board[row + i][col + 3 - i] == player for i in range(4)):
                return True

    return False

def main():
    rows = 6
    cols = 7
    board = create_board(rows, cols)
    current_player = 'X'

    while True:
        print_board(board)

        col = int(input(f"Player {current_player}, choose a column (0-{cols-1}): "))
        
        if col < 0 or col >= cols:
            print("Invalid column. Please choose a valid column.")
            continue

        if drop_token(board, col, current_player):
            if check_win(board, current_player):
                print_board(board)
                print(f"Player {current_player} wins!")
                break
            
            if all(board[0][col] != ' ' for col in range(cols)):
                print_board(board)
                print("It's a draw!")
                break

            current_player = 'X' if current_player == 'O' else 'O'
        else:
            print("Column is full. Choose another column.")

if __name__ == "__main__":
    main()